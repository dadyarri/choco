name: "Deploy application to Docker Hub (production)"

on:
  push:
    branches:
      - "main"
    tags:
      - "app-v*"
  workflow_dispatch: {}
    
jobs:
  build:
    if: startsWith(github.ref, 'refs/tags/')
    name: "Build & push services"
    runs-on: "ubuntu-latest"
    environment: "Production"
    steps:
      - uses: actions/checkout@v2
        name: Use git history
      
      - name: Get version number
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/app-}" >> $GITHUB_OUTPUT

      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push chocoAdmin
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:chocoAdmin"
          push: true
          tags: "dadyarri/9f840c17c6fd49dfb786607fdfb89e85:${{ steps.vars.outputs.tag }}, dadyarri/9f840c17c6fd49dfb786607fdfb89e85:latest"

      - name: Install SSH
        run: sudo apt install openssh-client -y

      - name: Connect to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          password: ${{ secrets.PRODUCTION_PASSWORD }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd /code
            docker compose pull admin
            docker compose up -d --scale admin=2
            docker compose logs

      - name: Wait for Deployment to Finish
        run: sleep 10

      - name: Check Deployment Status
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          password: ${{ secrets.PRODUCTION_PASSWORD }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd /code
            docker compose ps --filter status=running --format '{{.Names}}'

      - name: Remove Old Containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd /code
            docker compose down --remove-orphans --volumes
